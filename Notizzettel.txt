// =======================================

Moin

Modern C++

Peter Loos

// =======================================

Was sind meine Erwartungen
== Muss ab nächster Woche Modern C++ programmieren
== Will C++ Quellcode nur lesen / verstehen können
== Was muss DRIN sein 
== Multithreading: Ja oder Nein.
== Will einen Überblick erhalten ?

C++ Qt
MT: Yes
Lambda
Smart-Pointer
Kenntnisse: C# (Java) / Vorsicht: Querbezüge.
Variadische Templates // 
Memory Leak Detection

// =======================================

  Übergabe eine Adresse:

  Pointer // Referenz:
  ====================

Bemerkung: C ist ein C++ ECHT entalten.  (99%).

   Manches hat man in C++ verbessert  ==> NICHT: Meinen C-Stil setze ich in C++ fort.

   & - Operator: Adresse - von 

   * - Operator: Weise Wert (rechte Seite) indirekt zu.


=====================================================

C++:   Performanz !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Kritik:   "Da ist eine Kopie"

Credo:  Kopien auf ALLE FÄLLE vermeiden !!!!!!!!!!!!!!!!!!!!!!!!!!!

C# / Java / Python:

Point p;   // Zeiger // Referenz !!!!!!!!!  

           // class    // struct: Ist in C# ein Objekt ALS WERT / am Stack.

Point p = new Point ();    // jetzt habe ich hier ein Objekt

C++:

Point p;   // Wert ( Value ) // Ich habe das Objekt

Einstufung:  // Einordnung:

C# / Java / Python:     Referenz-basiert

C++:                    a) Value / Wert-basiert
                        b) Referenz-basiert

Eine Referenz - Variable enthält eine ADRESSE wie eine Zeigervariable !!!

C++ - Wording: Eine Referenz ist ein ALIAS-Name
               einer bekannten, benannten Variablen.

// ======================================================

Temporäre Objekte kann man nicht via Referenz ansprechen:

Als KOPIE ginge es.

NEUES KONZEPT: Ab C++ 11 geht es !!!!!!!!!!!

Wie ???

Mit einem neuen Referenz-Typ :)   


std::string &

std::string &&

// =======================================

C:

 x = y;

 A) Bei einer Wertzuweisung interessiere ich mich bei

    x für die ADRESSE ==> LValue   // Left

B) Bei einer Wertzuweisung interessiere ich mich bei

    y für den Wert von y  ==> RValue  // Right


// RValue: Whyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy ????

Move - Semantik:

================================================

Beobachtung:  Kritik:  Überflüssige KOPIE

...: ...  700   // Anon. Objekt am Stack // wird freigegeben
...: ... 4000   // std::vector


Ab C++ 11: Move - Semantik.

...: ...  240   // Anon. Objekt am Stack //

...: .. B0


Rule - of - Three:

https://github.com/pelocpp/cpp_introduction/blob/master/Cpp_Introduction/Markdown/RuleOfThree.md

==========

Links von ".print" müssen sich
in einer Klasse/Struktur/Union befinden


Most vexing parse - Wikipedia



// ===================================================

Übergabe von Funktionen an andere Funktionen:

a) C-Funktionen

b) Aufrufbares Objekt  // Callable Object

   Überladen von Operatoren:  operator ()

   Wozu: Man möchte manchmal "Tätigkeiten" (Funktionen)
         an andere Funktionen weiterreichen.

         Frage: Welchen Namen gebe ich dieser Funktion ???

         C++: Einfache Antwort: KEINEN.  operator ()



Lokale Funktionsdefinitionen sind unzulässig

Lokale Klassen sind möglich 

Bemerkung:

Was ist eine Lambda-Funktion ???

A) Es ist KEINE FUNKTION !!!!!!!!!!!

Es ist ein CALLABLE OBJECT.  ==> Ein Objekt

=========================================================

Klasse std::vector

===> Wo sind die Daten: Abgelegt:  Am Heap   ( Runtime )

=========================================================

Programmiersprachen: Grammatik / Syntax / Lexikon

Lexikon ist erweiterbar

Syntaxerweiterung:

Wie: wert operator ""  _suffix  (params);

UDL  ===>   user defined literal


123

123.5464

234.34f

123_km

20_kg    ===> 20

20_euros

0xFF0000_color   ==> class Color (  r, g, b )

"05.11.2024"_date

"technologische_beschreibung"_namen;  ==> ge-parsed

===================================================

Übungsteil:

Move-Semantik:

===================================================


https://stackoverflow.com/questions/71440372/lifetime-of-a-temporary-object-when-passed-as-an-argument-to-stdmove

===================================================

Exception Safety:
------------------



===================================================

Smart Pointer:
==============

Dynamische Speicherverwaltung: 

Was ist das Problem von 'new' ???

delete wird vergessen 

"Death March"

Idee:  

a) Klassen / Objekte

b) Konstruktoren / Destruktoren

c) Wann wird ein Destruktor aufgerufen ???

   Wenn ich den Scope verlasse  
      ==> Garantierter / Deterministischer Aufruf

   {
       Person dagobert;

       ....


   }   // Destruktor

d) Zeiger, die von new zurückgeliefert werden:

   ===> Obhut: Hüllenklasse.

   ===> Konstruktor:  new
   ===> Destruktor:   delete

i) auto_ptr : Deprecated.

ii)

   std::unique_ptr
   std::shared_ptr, std::weak_ptr


Strategien:

   std::unique_ptr-Objekt kann zu EINEM Zeitpunkt
   nur / genau EINEN Besitzer haben.

   std::shared_ptr-Objekt kann zu EINEM Zeitpunkt
   MEHRERE Besitzer haben.


Return Value Optimierung

// ===================================
...
Detected memory leaks!
Dumping objects ->
C:\Peter_Loos\GeneralSnippets\UniquePtr\UniquePtr.cpp(265) : {160} normal block at 0x000001CCF22A45C0, 40 bytes long.
 Data: <                > CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD 
Object dump complete.
Das Programm "[11020] Cpp_Modern_Bremen.exe" wurde mit Code 0 (0x0) beendet.


HEAP:

 CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD CD 

STACK:

 CC CC CC CC CC .....

 Scalar vs. Array delete / new:

 Immer vom selben ausgehen.

 Was passiert, wenn wir uns an diese Regel nicht halten?

 UB:  Undefined Behaviour

 Semantik Beschreibung.


 Memory Leaks:

 https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/MemoryLeaks/MemoryLeaksDetection.md

 Nur Visual C++.

 // Frage:  

 Habe eine Klasse, habe ein Objekt:

 Es fehlen mir gewisse Information, 
 die an anderer Stelle (Erzeugung) vorhanden waren.

 Lösung:

 Policy based Design.

 https://github.com/pelocpp/cpp_design_patterns/tree/master/Patterns/PolicyBasedDesign/Resources

 // =======================================================================

 Unique_Ptr:

 Shared_Ptr:  PROBLEM:

       Dieser funktioniert nicht IMMER !!!!!!!!!!!!!!

       Was ist das Problem ???




int* ptr = null;

 Shared_Ptr<int> tmp;

 // empty

 ===========

Shared_Ptr<int> sp;    // nicht empty ......... make_shared // new

 // func (Shared_Ptr<int> sp)
 {
     
 }


 // =======================================================

 
 // =======================================================================

 Unique_Ptr:
 Shared_Ptr:

 Ich starte neu mit der Thematik "Smart Pointer" !

 ===> (PL): Go-for  Unique_Ptr: Einfacher, schneller (no Mutex),
            NUR EIN Owner

            Nachteil: EIN Owner.
 
 Wird eine Anwendung komplexer:

  ===> (PL): Go-for  Shared_Ptr: langsamer (no Mutex),
            Mehrere Besitzer. 

            Nachteil: Funktioniert nicht immer !!!!!!!!!!!!!!!!!!!

            Gibt den Speicher nicht frei !!!!!!!!!!!!!!!
 
A) std::weak_ptr

B) Problem des shared_ptr's

C) Lösung.

// ================================================================

Wo habe ich Zyklen ???

Observer - Pattern:

Quelle / Target: Objekt, das seinen Zustand ändert.

   Für diese Änderungen interessieren sich Clients.

Clients:

   Diese interessieren sich für Änderungen an der Quelle.

   Dazu melden sich Clients an der Quelle an (und wieder ab)


Detail:

Quelle und Clients:  std::shared_ptr

    Habe eine Ownership // irgendjemand in der Anwendung muss
                           deren Lebensdauer entscheiden.

Beobachtens / Observer:

a) Eine Quelle KENNT die Clients, die es bei Zustandsänderung informiert
   (informiert: Aufruf einer Methode am Client (s)).

   Wie: Shared_Ptr oder Weak_Ptr ???

   Anwort: Eine Quelle sollte NICHT zum Besitzer eines Clients werden !!!!

            Go - for - Weak_Ptr

    Konsequenz: Ein Ereignis tritt ein:

       for - all Clients // for - all Weak-Ptrs:   lock()

       lock() ==> empty : Kann sein.

       Gehe zum nächsten WeakPtr in der Liste und ignoriere den empty.



FAZIT:

a) std::shared_ptr: Zentralen Objekte

b) Viele Verwender eines "Zentralen Objekte // std::shared_ptr"

   sollten NICHT zum Besitzer (Owner) werden.

   Wenn doch: Referenz Count geht nach oben.

// Ein Vergleich

    int tmp = n;
00007FF62B7D5A5F  mov         eax,dword ptr [n]  
00007FF62B7D5A65  mov         dword ptr [tmp],eax  

    int tmp = n;
00007FF62B8DCB90  mov         rax,qword ptr [n]  
00007FF62B8DCB97  mov         eax,dword ptr [rax]  
00007FF62B8DCB99  mov         dword ptr [tmp],eax  

// 
=======================

std::initializer_list

ist KEIN Container im Sinne der STL:

Light-Weight Container

begin(), end(), size().

std::initializer_list und std::vector sind befreundet :)

Go - for - std::initializer_list

SSO...  Small String Optimization  ==> "Kleine" Zeichenkette liegen 

                                       im std::string Objekt selbst.



std::vector<int> vec1 (10);  // Vektor: Size 10, alle Werte mit 0 vorbelegt

std::vector<int> vec{ 10 };  // Vektor: Size 1, vorbelegt mit 10

// =========================================================

Variadische Templates:
======================

Why ???????????????????????????????????????????????

Es gibt viele STL // Bibliotheks-Funktionen, 

die eine bel. Anzahl von Werten // bel. Typs transportieren:

std::make_shared
std::make_unique

... emplace

std::thread:  ===> Übergabe der Parameter an die Thread-Prozedur



// primary template

template<typename T, typename ... TArgs>
void printer(T n, TArgs... args)
{
  printer(args... );
}

// template specialization

template<>
void printer <int, int, int, int>  (T n, TArgs... args)
{
  printer(args... );
}

TArgs ... args

NOmenklatur: args ist ein "Parameter Pack"

Operationen:

Vorangestelltes // nachgestelltes ...   // einpacken, auspacken

Beschreibung: Was ist auspacken ??? Es wird bzgl. der Werte
              eine KOMMA getrennte Liste erzeugt.

sizeof... (args)

// =================================================

"Perfect Forwarding"

Referenzen

// =================================================

Go - for - "emplace"

// =================================================

for _ each   

Minus von einem for _ each: Der Index geht verloren.

// ==================================

Short Circuit Evaluation
            
            return cond && andAll(conds...);

for...

// =====================================

int n;

//

hat n einen gültigen Wert ----------

if (n == 0)

if (n == -1)

if (n == -243823423)

int n;
bool isValid;

std::optional

C#:

int? n;


// ==============================================

Wozu brauche ich einen std::variant  ???


Kann Daten unterschiedlichen Typs aufnehmen ...
zu einem Zeitpunkt aber nur EINEN Wert.

Excel  // Sheets:   ==> Zelle // Cell

Werte, Zeichenketten, Datum, Currency, Gleitpunkt, ...

std::variant: Vorab bekannt sein.

std::any  // Type Erasure

Game - Programming:   Board ===> Figuren ===> std::variant

// ================================================

C# Reflection API

C++ 26: Reflection

Type Traits: "C++ Reflection für Arme".

Diagnose Tool

// ================================================

Do: 16 Uhr.

// ================================================

Folding   // Abrollen:   Optimierungstechnik

Denselben Operator wiederholt anwenden zu können: